import { grid, assign } from "../src";

describe("grid API", () => {
	describe("==> grid generation", () => {
		it("implemented", () => {
			expect(grid.generateGrid).toBeDefined();
		});
		it("top-left anchored grids", () => {
			const grids = grid.generateGrid({
				width: 100,
				height: 100,
				numRows: 2,
				numColumns: 2,
				translate: [0, 0],
				centerPoint: false,
			});
			const correctResult = [
				[0, 0],
				[50, 0],
				[0, 50],
				[50, 50],
			];
			expect(grids.gridWidth).toBe(50);
			expect(grids.gridHeight).toBe(50);
			expect(grids.gridPoints.length).toBe(4);
			expect(grids.gridPoints).toEqual(correctResult);
		});
		it("center anchored grids", () => {
			const grids = grid.generateGrid({
				width: 100,
				height: 100,
				numRows: 2,
				numColumns: 2,
				translate: [0, 0],
				centerPoint: true,
			});
			const correctResult = [
				[25, 25],
				[75, 25],
				[25, 75],
				[75, 75],
			];
			expect(grids.gridWidth).toBe(50);
			expect(grids.gridHeight).toBe(50);
			expect(grids.gridPoints.length).toBe(4);
			expect(grids.gridPoints).toEqual(correctResult);
		});

		it("implemented", () => {
			expect(grid.generateGrid).toBeDefined();
		});
	});
	describe("automatic grid assignment", () => {
		it("implemented", () => {
			expect(grid.autoGridAssignment).toBeDefined();
		});
		it("correct assignments", () => {
			const correctGrid = [
				[0, 0],
				[1, 0],
				[0, 1],
				[1, 1],
			];
			const points = [
				[5, 4],
				[1, 0],
				[1, 1],
				[-1, 1],
			];

			const trueAssignments = assign({ points, assignTo: correctGrid });

			const output = grid.autoGridAssignment({
				numColumns: 2,
				numRows: 2,
				points,
				screenWidth: 2,
				screenHeight: 2,
				screenX: 0,
				screenY: 0,
			});
			const autoGeneratedAssignments = output.assignments.map(
				(d) => d.assignedPointIndex
			);
			expect(autoGeneratedAssignments).toStrictEqual(trueAssignments);
		});
	});
});
